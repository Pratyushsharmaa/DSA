//TC = O(log n)

#include<iostream>
#include<algorithm>
using namespace std;

int binarySearch(int arr[], int left, int right, int x){
    while(left<=right){
        int mid = left+(right-left)/2;
        //Check if x is mid
        if(arr[mid]==x) return mid;

        //If x is smaller, ignore right part
        if(x<arr[mid]){
            right = mid-1;
        }
        else{
            left = mid+1;
        }
        
    }
        return -1; //No element found
}

int exponentialSearch(int arr[], int n, int x){
    if(arr[0]==x) return x; //first element is target

    //Find range for binary search
    int bound = 1;
    while(bound<n && arr[bound]<=x){
        bound *=2;
    }
    int low = bound/2;
    int high = min(bound,n-1);
    binarySearch(arr,low,high,x);
}

int main(){
    int arr[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
    int n = sizeof(arr) / sizeof(arr[0]);
    int x = 15; // Target element to search

    int result = exponentialSearch(arr, n, x);
    if (result != -1)
        cout << "Element " << x << " is at index " << result << "." << endl;
    else
        cout << "Element " << x << " is not present in the array." << endl;

    return 0;

}
